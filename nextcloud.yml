---
- hosts: nextcloud

  roles:
    # ansible-galaxy install -p roles linuxhq.ius &&
    # ansible-galaxy install -p roles geerlingguy.php &&
    # ansible-galaxy install -p roles geerlingguy.repo-remi &&
    # ansible-galaxy install -p roles geerlingguy.nginx &&
    # ansible-galaxy install -p roles bertvv.mariadb &&
    - role: bertvv.mariadb
      become: true
      mariadb_bind_address: '0.0.0.0'
      mariadb_root_password: 'root'
      mariadb_databases: [{name: 'nextcloud_db'}]
      mariadb_users:
        -
          name: nextcloud
          password: nextcloud
          priv: "nextcloud_db.*:ALL,GRANT"
          host: "127.0.0.1"
    - role: geerlingguy.repo-remi
      become: true
    - role: geerlingguy.php
      become: true
      php_webserver_daemon: "nginx"
      php_enablerepo: "remi-php73"
      php_packages:
        - php-cli
        - php-common
        - php-fpm
        - php-zip
        - php-intl
        - php-gd
        - php-ldap
        - php-json
        - php-mbstring
        - php-mysqlnd
        - php-opcache
        - php-pdo
        - php-xml
        - php-posix
        - php-apc
        - php-imagick
      php_disable_functions:
        - exec
        - passthru
        - shell_exec
        - system
        - proc_open
        - popen
        - parse_ini_file
        - show_source
      php_enable_php_fpm: true
      php_enable_apc: true
      php_memory_limit: "64M"
      php_expose_php: "Off"
      php_date_timezone: "Europe/Rome"
      php_max_execution_time: "90"
      php_upload_max_filesize: "512M"
      php_fpm_pool_user: php-fpm
      php_fpm_pool_group: php-fpm
    - role: geerlingguy.nginx
      become: true
      nginx_sendfile: "off"  # TODO: enable outside of virtualbox
      nginx_upstreams:
        # Or: server unix:/var/run/php/php7.2-fpm.sock;
        - name: php-handler
          servers: {
            "127.0.0.1:9000"
          }
      nginx_vhosts:
      - listen: "80"
        server_name: "nextcloud.sso.local"
        return: "301 https://$server_name$request_uri"
        filename: "nextcloud_80_redirect.conf"
      - listen: "443 ssl http2"
        server_name: "nextcloud.sso.local"
        index: "index.html"
        root: "/var/www/html/nextcloud"
        filename: "nextcloud.conf"
        # mkdir /etc/ssl/nginx
        # cd /etc/ssl/nginx
        # openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nextcloud.sso.local.key -out nextcloud.sso.local.pem
        # chmod -R 640 .
        # chmod 550 .
        # chown root:nginx -R .
        extra_parameters: |
          # Taken from:
          # https://docs.nextcloud.com/server/16/admin_manual/installation/nginx.html

          ssl_certificate /etc/ssl/nginx/nextcloud.sso.local.pem;
          ssl_certificate_key /etc/ssl/nginx/nextcloud.sso.local.key;

          # set max upload size
          client_max_body_size 512M;
          fastcgi_buffers 64 4K;

          gzip on;
          gzip_vary on;
          gzip_comp_level 4;
          gzip_min_length 256;
          gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
          gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

          location = /robots.txt {
              allow all;
              log_not_found off;
              access_log off;
          }
          location = /.well-known/carddav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /.well-known/caldav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location / {
              rewrite ^ /index.php$request_uri;
          }

          location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
              deny all;
          }
          location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) {
              deny all;
          }

          location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {
              fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param HTTPS on;
              # Avoid sending the security headers twice
              fastcgi_param modHeadersAvailable true;
              fastcgi_param front_controller_active true;
              fastcgi_pass php-handler;
              fastcgi_intercept_errors on;
              fastcgi_request_buffering off;
          }

          location ~ ^\/(?:updater|oc[ms]-provider)(?:$|\/) {
              try_files $uri/ =404;
              index index.php;
          }

          # Adding the cache control header for js and css files
          # Make sure it is BELOW the PHP block
          location ~ \.(?:css|js|woff2?|svg|gif)$ {
              try_files $uri /index.php$request_uri;
              add_header Cache-Control "public, max-age=15778463";
              # Add headers to serve security related headers (It is intended to
              # have those duplicated to the ones above)
              # Before enabling Strict-Transport-Security headers please read into
              # this topic first.
              # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
              #
              # WARNING: Only add the preload option once you read about
              # the consequences in https://hstspreload.org/. This option
              # will add the domain to a hardcoded list that is shipped
              # in all major browsers and getting removed from this list
              # could take several months.
              #add_header X-Content-Type-Options nosniff;
              #add_header X-XSS-Protection "1; mode=block";
              #add_header X-Robots-Tag none;
              #add_header X-Download-Options noopen;
              #add_header X-Permitted-Cross-Domain-Policies none;
              #add_header Referrer-Policy no-referrer;

              # Optional: Don't log access to assets
              access_log off;
          }

          location ~ \.(?:png|html|ttf|ico|jpg|jpeg)$ {
              try_files $uri /index.php$request_uri;
              # Optional: Don't log access to other assets
              access_log off;
          }
        state: present
      - server_name: "_"  # Mandatory but unused
        filename: "default"
        state: absent

  pre_tasks:
  - name: Set hosts file
    copy: src=hosts dest=/etc/hosts owner=root group=root
    become: true

  tasks:
  # These came in the php-fpm-7.3.5-1.el7.remi package and have apache
  # instead of php-fpm as the group/owner...
  # This causes Nextcloud to loop on login, without any error logged
  # ANYWHERE.
  # The solution was here: https://help.nextcloud.com/t/login-loop-with-nextcloud12-fresh-install/21185/7
  # except that php-fpm is running with the php-fpm user here, so nginx
  # user wasn't the answer.
  - name: Fix permissions on some directories for php-fpm
    file:
      path: "{{ item.path }}"
      state: directory
      recurse: yes
      owner: "{{ item.owner }}"
      group: "php-fpm"
    loop:
    - { "owner": "root", path: "/var/lib/php/opcache/" }
    - { "owner": "root", path: "/var/lib/php/wsdlcache/" }
    - { "owner": "php-fpm", path: "/var/lib/php/session/" }

  - name: Enable Nextcloud cron job
    become: true
    cron:
      name: nextcloud
      user: php-fpm
      minute: "*/15"
      job: "php -f /var/www/html/nextcloud/cron.php"
