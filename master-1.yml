---
- hosts: mm1
  become: true

  vars:
    other_cert: "ca/ldap2_example_local_cert.pem"

  pre_tasks:
  - name: Set hosts file
    copy: src=hosts dest=/etc/hosts owner=root group=root

  roles:
    -
      role: 389ds-server
      suffix: "dc=example,dc=local"
      rootdn_password: secret1
      tls_enabled: true
      # ./cert.sh ldap1.example.local
      tls_cert_file: "ca/ldap1_example_local_cert.pem"
      tls_key_file: "ca/ldap1_example_local.key"
      tls_files_remote: false
      tls_certificate_trusted: false
      tls_enforced: true
      password_storage_scheme: "PBKDF2_SHA256"
      plugins_enabled:
        MemberOf Plugin: true
        Distributed Numeric Assignment Plugin: false
      custom_schema:
      - "schema/97schac.ldif"
      - "schema/98ssh.ldif"
      - "schema/98telegram.ldif"
      - "schema/98weeeopen.ldif"
    -
      role: 389ds-replication
      replica_role: 'both'
      suffix: "dc=example,dc=local"
      server_uri: "ldap://localhost"
      rootdn_password: secret1
      use_starttls: true
      tls_certificate_public_trusted: false
      replication_user_password: "Sahj0aedolo0aiNgusoo8onu0s"
      replication_user_password_remote: "icauvaelae3reixeiP9ahgh0ei" # On the other server
      consumer_uri: "ldap://ldap2.example.local:389/" # The other server
      supplier_replica_id: 1

  tasks:
  - block:
    - name: Copy other cert
      copy:
        src: "{{ other_cert }}"
        dest: "/tmp/other-cert-ansible-managed.crt"
        mode: '400'
        setype: cert_t
      changed_when: false

    # -t "C,," is probably good enough, P makes more sense but maybe it has been
    # removed or existed only in some weird version of certutil, since it seems
    # to be ignored
    - name: Install other certificate into NSS db
      command: >
        certutil -A
        -d '/etc/dirsrv/slapd-default'
        -n '{{ other_cert | basename | replace('.', '_') }}-ansible-managed'
        -t 'PC,PC,PC'
        -i '/tmp/other-cert-ansible-managed.crt'
      changed_when: false

    # Detecting when something changed is too complicated
    - name: Restart 389DS
      service:
        name: "dirsrv@{{ serverid }}"
        state: restarted

    always:
    - name: Remove temporary files
      file:
        state: absent
        path: "/tmp/other-cert-ansible-managed.crt"
      changed_when: false

  - name: Ensure container entries exist
    ldap_entry:
      server_uri: "ldap://localhost"
      validate_certs: "false"
      start_tls: "true"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ rootdn_password }}"
      dn: "{{ item.dn }}"
      objectClass: "{{ item.objectClass }}"
      state: present
    loop:
    - { dn: "ou=Groups,dc=example,dc=local", objectClass: ["organizationalunit", "top"] }
    - { dn: "ou=People,dc=example,dc=local", objectClass: ["organizationalunit", "top"] }
    - { dn: "ou=Services,dc=example,dc=local", objectClass: ["organizationalunit", "top"] }

  - name: Configure ACIs
    ldap_attr:
      server_uri: "ldap://localhost"
      validate_certs: "false"
      start_tls: "true"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ rootdn_password }}"
      dn: "{{ item.dn }}"
      state: exact
      name: "aci"
      values: "{{ item.acis }}"
    loop:
      -
        dn: "{{ suffix }}"
        acis:
          - '(target = "ldap:///{{ suffix }}")(targetfilter = "(ou=*)") (version 3.0; acl "Allow all to read People"; allow (read, search) userdn = "ldap:///all";)'
      -
        dn: "ou=People,dc=example,dc=local"
        acis:
          - '(targetfilter = "(uid=*)")(targetattr = "objectClass || cn || uid || telegramID || createTimestamp || creatorsName || entrydn || entryid || hasSubordinates || modifiersName || modifyTimestamp || nsUniqueId || numSubordinates || parentid || subschemaSubentry") (version 3.0; acl "Allow Keycloak to read users"; allow (compare, search, read) userdn = "ldap:///cn=Keycloak,ou=Services,dc=example,dc=local";)'
          - '(targetfilter = "(uid=*)")(targetattr = "userPassword") (version 3.0; acl "Allow Keycloak to change passwords"; allow (write) userdn = "ldap:///cn=Keycloak,ou=Services,dc=example,dc=local";)'
          - '(targetfilter = "(uid=*)")(targetattr = "userPassword") (version 3.0; acl "Allow users to change their password"; allow (write) userdn = "ldap:///self";)'
          - '(targetfilter = "(uid=*)")(targetattr = "objectClass || uid || sn || schacPersonalUniqueCode || degreeCourse || schacDateOfBirth || schacPlaceOfBirth || mobile || mail || safetyTestDate || telegramID || telegramNickname || description") (version 3.0; acl "Allow HR to read and edit users"; allow (write, search, compare, add, read) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'
          - '(targetfilter = "(uid=*)")(targetattr = "userPassword") (version 3.0; acl "Allow HR to change users password"; allow (write) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'
          - '(targetfilter = "(uid=*)") (version 3.0; acl "Allow HR to add and remove users"; allow (add, delete) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'
          - '(targetfilter = "(uid=*)")(targetattr = "memberOf") (version 3.0; acl "Allow HR to read user groups via memberOf"; allow (compare, search, read) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'
      -
        dn: "ou=Groups,dc=example,dc=local"
        acis:
          - '(targetfilter = "(cn=*)")(targetattr = "objectClass || cn || ou || description || member || uniqueMember  || createTimestamp || creatorsName || entrydn || entryid || hasSubordinates || modifiersName || modifyTimestamp || nsUniqueId || numSubordinates || parentid || subschemaSubentry") (version 3.0; acl "Allow Keycloak to read groups"; allow (compare, search, read) userdn = "ldap:///cn=Keycloak,ou=Services,dc=example,dc=local";)'
          - '(targetfilter = "(cn=*)")(targetattr = "objectClass || cn || ou || description || member || uniqueMember") (version 3.0; acl "Allow HR to read groups"; allow (compare, search, read) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'
          - '(targetfilter = "(cn=*)")(targetattr = "member || uniqueMember") (version 3.0; acl "Allow HR to add and remove people from groups"; allow (write) groupdn = "ldap:///cn=HR,ou=Groups,dc=example,dc=local";)'

  - name: Configure password policy
    ldap_attr:
      server_uri: "ldap://localhost"
      validate_certs: "false"
      start_tls: "true"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ rootdn_password }}"
      dn: "cn=config"
      state: exact
      name: "{{ item.name }}"
      values: "{{ item.value }}"
    loop:
      - { name: "passwordMinLength", value: "16" }
      - { name: "passwordLockout", value: "on" }
      - { name: "passwordMaxFailure", value: "6" }
      - { name: "passwordLockoutDuration", value: "120" }
      - { name: "passwordLegacyPolicy", value: "off" }
      - { name: "passwordIsGlobalPolicy", value: "on" }
